pipeline {
    agent any

    parameters {
        choice(name: 'DEPLOY_ENV', choices: ['blue', 'green'], description: 'Choose which environment to deploy: Blue or Green')
        choice(name: 'DOCKER_TAG', choices: ['blue', 'green'], description: 'Choose the Docker image tag for the deployment')
        booleanParam(name: 'SWITCH_TRAFFIC', defaultValue: false, description: 'Switch traffic between Blue and Green')
    }

    environment {
        PROJECT_ID = 'praks-dev'
        CLUSTER_NAME = 'prod-cluster'
        CLUSTER_ZONE = 'asia-south1-b'
        GOOGLE_APPLICATION_CREDENTIALS = credentials('jenkins-sa-key')  // Service account key file
        KUBE_CONFIG = 'kubeconfig'

        IMAGE_NAME = "praks007/camp-scout-prod"
        TAG = "${params.DOCKER_TAG}"  // The image tag now comes from the parameter
        KUBE_NAMESPACE = 'prod'
    }

    stages {
        stage('Checkout') {
            steps {
                // Checkout code from source repository
                git branch: 'master', url: 'https://github.com/praks7v/Camp-Scout.git'
            }
        }

        stage('Docker Pull & Tag') {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker') {
                        sh "docker pull praks007/camp-scout-dev:latest && docker tag praks007/camp-scout-dev:latest praks007/camp-scout-prod:${TAG}"
                    }
                }
            }
        }

        stage('Trivy Image Scan') {
            steps {
                sh "trivy image --format table -o trivy-is-report.json ${IMAGE_NAME}:${TAG}" 
            }
        }

        stage('Docker Push Image') {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker') {
                        sh "docker push ${IMAGE_NAME}:${TAG}"
                    }
                }
            }
        }

        stage('Authenticate with GCP') {
            steps {
                script {
                    // Authenticate with Google Cloud
                    sh 'gcloud auth activate-service-account --key-file=${GOOGLE_APPLICATION_CREDENTIALS}'
                }
            }
        }

        stage('Get GKE Credentials') {
            steps {
                script {
                    // Fetch credentials to interact with GKE cluster
                    sh '''
                    gcloud container clusters get-credentials ${CLUSTER_NAME} \
                      --zone ${CLUSTER_ZONE} \
                      --project ${PROJECT_ID}
                    '''
                }
            }
        }

        stage('Deploy Secret and Services') {
            steps {
                script {
                                                   
                    // Deploy Kubernetes manifests using kubectl
                    sh '''
                    kubectl apply -f prod-namespace.yml --namespace=${KUBE_NAMESPACE}
                    kubectl apply -f prod-secret.yml --namespace=${KUBE_NAMESPACE}
                    kubectl apply -f prod-service-account.yml --namespace=${KUBE_NAMESPACE}
                    kubectl apply -f prod-service.yml --namespace=${KUBE_NAMESPACE}
                    sleep 60
                    '''
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                script {
                    def deploymentFile = ""
                    if (params.DEPLOY_ENV == 'blue') {
                        deploymentFile = 'prod-deployments-blue.yml'
                    } else {
                        deploymentFile = 'prod-deployments-green.yml'
                    }

                    sh '''
                    kubectl apply -f ${deploymentFile} -n ${KUBE_NAMESPACE}
                    sleep 30
                    '''
                }
            }
        }

        stage('Verify Deployment') {
            steps {
                script {
                    // Verify that the deployment is successful
                    sh '''
                    kubectl get pods --namespace=${KUBE_NAMESPACE}
                    kubectl get svc --namespace=${KUBE_NAMESPACE}
                    '''
                }
            }
        }
    }
}
